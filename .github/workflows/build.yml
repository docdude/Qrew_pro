name: Build Installers

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install VLC
      run: |
        choco install vlc -y
        # Add VLC to PATH for python-vlc
        echo "C:\Program Files\VideoLAN\VLC" >> $env:GITHUB_PATH
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
        
    - name: Install NSIS
      run: choco install nsis
      
    - name: Build Windows installer
      run: |
        cd ${{ github.workspace }}
        python build_scripts/build.py --clean --platform
      
    - name: Check Windows build output
      run: |
        echo "Checking dist directory:"
        if (Test-Path "dist") { Get-ChildItem -Recurse dist } else { echo "No dist directory found" }
        
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if build failed
      with:
        name: windows-installer
        path: |
          dist/*.exe
          dist/*.zip
        if-no-files-found: warn

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install VLC
      run: |
        brew install --cask vlc
        # VLC should be in /Applications/VLC.app

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
        
    - name: Build macOS installer
      run: |
        cd ${{ github.workspace }}
        python build_scripts/build.py --clean --platform

    - name: Check macOS build output  
      run: |
        echo "Checking dist directory:"
        ls -la dist/

    - name: Upload macOS installer
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: |
          dist/*.dmg
          dist/*.app.zip
        if-no-files-found: warn


  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          vlc \
          libvlc-dev \
          dpkg-dev \
          rpm \
          alien \
          build-essential \
          python3-dev \
          libxkbcommon-x11-0 \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-shape0
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
        
    - name: Build Linux packages
      run: |
        cd ${{ github.workspace }}
        export PYTHONPATH=${{ github.workspace }}:$PYTHONPATH
        python build_scripts/build.py --clean --platform

    - name: Check Linux build output
      run: |
        echo "Checking dist directory:"
        ls -la dist/

    - name: Upload Linux packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          dist/*.deb
          dist/*.rpm  
          dist/*.tar.gz
          dist/*.AppImage
        if-no-files-found: warn

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    # Add explicit permissions
    permissions:
      contents: write
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find . -type f -name "*" | head -20
        
    - name: Prepare release files
      run: |
        mkdir -p release-files
        # Copy all artifacts to release-files directory
        find . -name "*.exe" -exec cp {} release-files/ \; 2>/dev/null || true
        find . -name "*.dmg" -exec cp {} release-files/ \; 2>/dev/null || true  
        find . -name "*.deb" -exec cp {} release-files/ \; 2>/dev/null || true
        find . -name "*.rpm" -exec cp {} release-files/ \; 2>/dev/null || true
        find . -name "*.tar.gz" -exec cp {} release-files/ \; 2>/dev/null || true
        find . -name "*.zip" -exec cp {} release-files/ \; 2>/dev/null || true
        find . -name "*.AppImage" -exec cp {} release-files/ \; 2>/dev/null || true
        
        echo "Release files prepared:"
        ls -la release-files/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        body: |
          # Qrew v${{ github.ref_name }}
          
          Automated loudspeaker measurement system using REW API.
          
          ## Downloads
          
          - **Windows**: `Qrew-*-windows-installer.exe` or `Qrew-*-windows.zip`
          - **macOS**: `Qrew-*-macos.dmg`
          - **Linux**: `qrew-*-linux.deb`, `qrew-*-linux.rpm`, or `qrew-*-linux.tar.gz`
          
          ## Requirements
          
          - VLC Media Player must be installed
          - REW (Room EQ Wizard) for measurements
          
          ## Installation
          
          1. Download the appropriate package for your platform
          2. Install VLC Media Player if not already installed
          3. Install/extract Qrew
          4. Launch REW, start REW API (need pro upgrade license to control REW via the API)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}